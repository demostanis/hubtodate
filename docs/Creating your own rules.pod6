=begin pod

=head1 Creating your own rules

A rule doesn't yet exist for a repository?
You can easily create your own. They are
simple INI files with more functionality.

They can take any file extension, except
C<.ex> or C<.example>, which are ignored
by HubToDate, and are usually stored in
C</usr/share/hubtodate/rules>.

=head2 Structure

Rules work like INI files, meaning their
structure should be of multiple key value
pairs, down a header:

  [header]
  key = value

The four possible headers for a rule are
T<repository>, for any information related
to the repository to install, such as the
owner and name, T<release>, which describes
how to find, unpack and install a release,
T<verification>, which tells how to verify
the downloaded archive with GPG or by checking
sums, and optionally T<options>, to change
HubToDate's behavior per rule.

The value may be multiline, by specifying a
backslash at the end of the line:

  [header]
  key = multiline \
          value
  otherkey = ...

The equal sign may also be replaced by a colon,
meaning that: C<key : value> works as well.

=head2 Types

Each value has a type, either string (by default),
integer, true, false, or nothing.

In case the value is only made of numbers, (e.g. 42)
its type will be integer. If it contains a non-numeric
character, its type will be string. (e.g. 42s)

In case the value is positive, such as "yes" or "true"
("yep" and "yeah" might also work), its type will be true.
As opposite, negative values such as "no" or "false"
(or "nope", "Nah", "0") will be of type false.

Last but not least, three dots ("...") will specify type
nothing, meaning it has no value. You can also simply not
write the key value pair.

=head2 Comments

Lines starting by a hashtag ("#") or a semicolon (";") will
be understood as comments and ignored. Same applies to comments
after a value:

  # This is a comment
  key = value ; This is ignored!

=head2 The [repository] field

The repository field may contain up to three values:

=item on - I<(optional)> Tells where the repository should be fetched from. (e.g. GitHub)
=item owner - Person who owns the repository. (e.g. demostanis)
=item name - Name of the repository. (e.g. hubtodate)

Meaning that this is valid:

  [repository]
  owner = ogham
  name = exa

However, this is not:

  [repository]
  on = gitlab
  name = exa

Because, as of now, HubToDate doesn't search for repositories.
You must explicitly tell who created the repository and how it is called.

=head2 The [release] field

The release field describes how to find right release, (archive to install the software)
unpack it if needed, and install it. It may contain these values:

=item match - A Raku regex to find the right archive. (e.g. hubtodate.tar.gz)
=item unpack - A shell command to unpack the archive. (e.g. tar xf <archive>)
=item install - A shell command to install the software. (e.g. pacman -U hubtodate.tar.gz)
=item root - Whetever the install command should be run as root. If not, it is run as "nobody" user.

To match the right archive: if its name is constant between releases (e.g. software-amd64.deb),
you may just set this value to it. If, however, its name may change (e.g. software-1.1.1.deb),
you will need to use a regex. An example to match a version: C<'software-' \d+ % \. '.deb'>
should match "software-1.0.deb", "software-14.0.22.deb", etc.
For the unpack value, C<<archive>> is automatically replaced by the downloaded archive.

=head2 The [verification] field

The verification field tells how to verify archive using a checksum, or with GPG. (no support yet)
Currently supported algorithms are: (depending whetever your OS supports <algorithm>sum command,
which should be included in GNU coreutils)
=item md5
=item sha1
=item sha224
=item sha256
=item sha386
=item sha512
=item b2

Its value must be the filename where the checksums are.
For example:

  [verification]
  b2sums = b2sums.txt

Should fetch b2sums.txt file from the releases page, and run C<b2sum --check> with its contents.

=head2 The [options] field

The options field changes HubToDate's behavior. There are currently no options as of now.

=head2 Examples

You may find examples in the L<GitHub repository|https://github.com/demostanis/hubtodate/tree/master/hubtodate/rules>.

=end pod
